h1. American Express Open Forum Gem

"Open Forum":http://developer.openforum.com/ is a site that offers content about Small Business.
It is associated with American Express's OPEN CARD - a credit card used by Small Business Owners.

h2. The Gem

This is gem uses "httparty":https://github.com/jnunemaker/httparty to wrap calls to open forum.
It then uses "hashery's":http://rubyworks.github.com/hashery @OpenCascade@ class to turn the API's hash response into callable methods.

h2. Usage

h3. Adding AmexOpenForum Into Your Class

bc. require 'amex_open_forum'
class MyAmexAPI
  include AmexOpenForum
  open_forum_api_key "YOURKEYHERE"
end

h3. Making Requests to the API

bc. api = MyAmexAPI.new
api.most_recent
#=> {:Success=>"true", :ReturnItems=>{"Content"=>[{"Title"=>"Why LEDs Are a Vital Business Upgrade", "TeaserText"=>"How...}

h3. Making Arbitrary Requests

Since the gem mixes HTTParty into your class for you - you can call HTTParty methods like
bc. MyAmexAPI.get("/arbitrary/path")

h3. XML => Ugly Method Names

The beauty of HTTParty's parser is - it translates XML responses into a nice hash.
The beauty of OpenCascade is - it translates that hash into methods.
Open Forum's API responds with (surprise!) XML with leading-capitalized nodes - so out-of-the-box, you're methods
would look like @api.most_recent.ReturnItems.Content@...urf!

AmexOpenForum (ab)uses @method_missing@, allowing you to call underscorized versions of those node names.
so you could respect the XML's capitalization and call @api.most_recent.ReturnItems.Content@ OR
give your eyes a break and call @api.most_recent.return_items.content@

h2. Additional Resources

* "Open Forum API Documentation":http://developer.openforum.com/
* "URL TO HTTParty":https://github.com/jnunemaker/httparty
* Hashery ("github":https://github.com/rubyworks/hashery, "homepage":http://rubyworks.github.com/hashery/)